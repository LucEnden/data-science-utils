#!/bin/bash

dsutils_info () {
    echo -e "[DSUTILS | $(date +'%H:%M:%S')]: $1"
    for var in "$@"
    do
        echo -e "  $var"
    done
}

dsutils_success () {
    local GRN='\033[0;32m'
    local NOC='\033[0m'
    echo -e "${GRN}[DSUTILS | $(date +'%H:%M:%S')]: $1${NOC}"
    for var in "$@"
    do
        echo -e "  $var"
    done
}

dsutils_warn () {
    local YLW='\033[1;33m'
    local NOC='\033[0m'
    echo -e "${YLW}[DSUTILS | $(date +'%H:%M:%S')]: $1${NOC}"
    for var in "$@"
    do
        echo -e "  $var"
    done
}

dsutils_error () {
    local RED='\033[0;31m'
    local NOC='\033[0m'
    echo -e "${RED}[DSUTILS | $(date +'%H:%M:%S')]:${NOC} $1"
    for var in "$@"
    do
        echo -e "  $var"
    done
}

dsutils_read_env () {
    ENV_FILE=".dsutils.env"
    if [ ! -f $ENV_FILE ]; then
        echo "Environment file does not exist. Please run the initialization script before continuing."
        exit 1
    fi
    source $ENV_FILE
}

dsutils_get_project_root () {
    PROJECT_ROOT=""
    while getopts r: flag
    do
        case "${flag}" in
            r) PROJECT_ROOT=${OPTARG};;
        esac
    done
    
    # Check if PROJECT_ROOT is empty
    if [ -z "$PROJECT_ROOT" ]; then
        log "Error!"
        echo "Project root is empty. Please use the following: -r 'some_directory'"
        exit 1
    fi

    # Check if PROJECT_ROOT exists
    if [ ! -d "$PROJECT_ROOT" ]; then
        echo "The entered project root either is not a directory or does not exist."
        echo "Please verify that the project root exists before running this script:"
        echo "- $PROJECT_ROOT"
        exit 1
    fi
}