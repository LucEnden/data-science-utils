name: Create Minor or Patch Release

on:
  push:
    branches:
      - main
    paths-ignore:
      - '.github/**'

jobs:
  utils-updated:
    runs-on: ubuntu-latest
    outputs:
      are-updated: ${{ steps.utils-updated.outputs.are-updated }}
    steps:
      # Checkout the repository
      - uses: actions/checkout@v2
      - name: Check if utils are updated
        id: utils-updated
        run: |
          version_bump="none"

          git diff-tree --no-commit-id --name-status -r ${{ github.sha }} > git_diff_tree.txt

          pattern="^[A-Z]\s+"
          array_variable=()
          while IFS= read -r line; do
            array_variable+=("$line")
          done < <(grep -E $pattern git_diff_tree.txt)

          if [ ${#array_variable[@]} -eq 0 ]; then
            echo "No changes detected to utils, skip creating release."
            echo "are-updated=false" >> "$GITHUB_OUTPUT"
          else
            echo "Changes detected to utils, creating release."
            echo "are-updated=true" >> "$GITHUB_OUTPUT"
          fi

  create-intermediate-release:
    needs: utils-updated
    runs-on: ubuntu-latest
    if: needs.utils-updated.outputs.are-updated == 'true'
    steps:
      # Checkout the repository
      - uses: actions/checkout@v2
      - name: Determine bump level
        id: determine-bump-level
        run: |
          version_bump="none"

          echo "Getting file changes..."
          git diff-tree --no-commit-id --name-status -r ${{ github.sha }} > git_diff_tree.txt

          pattern="^[A-Z]\s+"
          array_variable=()
          while IFS= read -r line; do
              array_variable+=("$line")
          done < <(grep -E $pattern git_diff_tree.txt)

          for element in "${array_variable[@]}"; do
            # Check if element starts with
            # Added (A),
            # Copied (C),
            # Deleted (D),
            # Modified (M),
            # Renamed (R),
            # have their type changed (T),
            # Unmerged (U),
            # Unknown (X),
            # or have had their pairing Broken (B).

            # We detirmine the level of the bump based on the following:
                # If the push contains changes to the file structure, we bump the minor version
                # Else we bump the patch version
            if echo "$element" | grep -q "^[ADRT]"; then
                $version_bump = "minor"
                break
            fi
          done
                  
          if [[ $version_bump == "patch" ]]; then
              echo "Bumping patch version."
          else
              echo "Bumping minor version."
          fi

          echo "version-bump=$version_bump" >> "$GITHUB_OUTPUT"
      - name: Echo the bump level
        id: echo-bump-level
        run: |
          # Echo the bump level to the console
          echo "Version bump: ${{ steps.determine-bump-level.outputs.version-bump }}"
        # Get the latest version tag
      - uses: actions-ecosystem/action-get-latest-tag@v1
        id: get-latest-tag
      - uses: actions-ecosystem/action-bump-semver@v1
        id: bump-semver
        with:
          current_version: ${{ steps.get-latest-tag.outputs.tag }}
          level: "${{ steps.determine-bump-level.outputs.version-bump }}"
      - uses: actions-ecosystem/action-push-tag@v1
        with:
          tag: ${{ steps.bump-semver.outputs.new_version }}
          message: "New version: ${{ steps.bump-semver.outputs.new_version }}"
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: v${{ steps.bump-semver.outputs.new_version }}
          release_name: Release ${{ steps.bump-semver.outputs.new_version }}
          body: ${{ github.event.head_commit.message }}
          draft: false
          prerelease: true